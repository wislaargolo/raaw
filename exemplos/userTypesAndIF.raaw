/* --- Comentários de bloco e linha --- */
// teste de comentario de linha

type Struct = struct {
    int a;
    float b;
    string c, d;
};

type Node = struct {
    int value;
    ptr<Node> left;
    ptr<Node> right;
};

void main() {
    Struct st;
    st.a = 1;
    st.b = 2.5;
    st.c = "string";
    st.d = "outra";

    ptr<int> p;
    p = new int[1];
    val(p) = 42;

    ptr<Node> root = new Node[1];
    root.value = 100;
    root.left = null;
    root.right = null;

    /* Teste de if encadeado */
    int y = -5;
    if (y < 0) {
        printLine("y é negativo");
    } else if (y == 0) {
        printLine("y é zero");
    } else 
      if (y == 1) {
        printLine("y é um");
    } else {
        printLine("y é positivo");
    }

    /* Teste de lista (arranjo) e matriz */
    list<int> arranjo;
    initialize(arranjo, 5, 0);
    push(arranjo, 42);
    insert(arranjo, 2, 10);
    pop(arranjo);
    remove(arranjo, 1);
    int tamanho = length(arranjo);
    printLine("Length arranjo:");
    print(tamanho);
    printLine("");

    list<list<int>> matriz;
    initialize(matriz, 3);
    for (int i = 0; i < 3; i = i + 1) {
        for (int j = 0; j < 3; j = j + 1) {
            push(matriz[i], i * 3 + j);
        }
    }
    printLine("Matriz[1][2]:");
    print(matriz[1][2]);
    printLine("");

    /* Teste de dicionário */
    dicionario["a"] = 1;
    dicionario["b"] = 2;
    int x = dicionario["b"];
    printLine("Dicionario b:");
    print(x);
    printLine("");

    list<string> chaves = keys(dicionario);
    list<int> valores = values(dicionario);
    printLine("Keys e Values:");
    for (int k = 0; k < length(chaves); k = k + 1) {
        print(chaves[k]);
        print(": ");
        print(valores[k]);
        printLine("");
    }

    remove(dicionario, "a");
    printLine("Após delete(a): length keys = ");
    print(length(keys(dicionario)));
    printLine("");
}
